
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Tue Aug 01 14:28:28 CDT 2017
//----------------------------------------------------

package pattern;

import java_cup.runtime.*;
import java.util.ArrayList;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Tue Aug 01 14:28:28 CDT 2017
  */
public class PatternParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public PatternParser() {super();}

  /** Constructor which sets the default scanner. */
  public PatternParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public PatternParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\016\000\002\002\004\000\002\002\003\000\002\002" +
    "\003\000\002\002\003\000\002\002\003\000\002\007\003" +
    "\000\002\007\004\000\002\010\003\000\002\010\005\000" +
    "\002\003\003\000\002\003\003\000\002\004\005\000\002" +
    "\005\010\000\002\006\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\032\000\014\004\010\006\012\010\005\021\015\022" +
    "\004\001\002\000\026\002\ufff7\004\ufff7\005\ufff7\006\ufff7" +
    "\007\ufff7\010\ufff7\011\ufff7\012\ufff7\021\ufff7\022\ufff7\001" +
    "\002\000\014\004\010\006\012\010\005\021\015\022\004" +
    "\001\002\000\004\002\032\001\002\000\026\002\ufffd\004" +
    "\ufffd\005\ufffd\006\ufffd\007\ufffd\010\ufffd\011\ufffd\012\ufffd" +
    "\021\ufffd\022\ufffd\001\002\000\014\004\010\006\012\010" +
    "\005\021\015\022\004\001\002\000\026\002\ufffe\004\ufffe" +
    "\005\ufffe\006\ufffe\007\ufffe\010\ufffe\011\ufffe\012\ufffe\021" +
    "\ufffe\022\ufffe\001\002\000\014\004\010\006\012\010\005" +
    "\021\015\022\004\001\002\000\026\002\000\004\000\005" +
    "\000\006\000\007\000\010\000\011\000\012\000\021\000" +
    "\022\000\001\002\000\026\002\uffff\004\uffff\005\uffff\006" +
    "\uffff\007\uffff\010\uffff\011\uffff\012\uffff\021\uffff\022\uffff" +
    "\001\002\000\026\002\ufff8\004\ufff8\005\ufff8\006\ufff8\007" +
    "\ufff8\010\ufff8\011\ufff8\012\ufff8\021\ufff8\022\ufff8\001\002" +
    "\000\020\004\ufffc\006\ufffc\007\ufffc\010\ufffc\011\ufffc\021" +
    "\ufffc\022\ufffc\001\002\000\016\004\010\006\012\007\021" +
    "\010\005\021\015\022\004\001\002\000\020\004\ufffb\006" +
    "\ufffb\007\ufffb\010\ufffb\011\ufffb\021\ufffb\022\ufffb\001\002" +
    "\000\004\015\022\001\002\000\004\021\023\001\002\000" +
    "\004\016\024\001\002\000\026\002\ufff5\004\ufff5\005\ufff5" +
    "\006\ufff5\007\ufff5\010\ufff5\011\ufff5\012\ufff5\021\ufff5\022" +
    "\ufff5\001\002\000\006\005\030\012\027\001\002\000\006" +
    "\005\ufffa\012\ufffa\001\002\000\014\004\010\006\012\010" +
    "\005\021\015\022\004\001\002\000\026\002\ufff4\004\ufff4" +
    "\005\ufff4\006\ufff4\007\ufff4\010\ufff4\011\ufff4\012\ufff4\021" +
    "\ufff4\022\ufff4\001\002\000\006\005\ufff9\012\ufff9\001\002" +
    "\000\004\002\001\001\002\000\016\004\010\006\012\010" +
    "\005\011\034\021\015\022\004\001\002\000\026\002\ufff6" +
    "\004\ufff6\005\ufff6\006\ufff6\007\ufff6\010\ufff6\011\ufff6\012" +
    "\ufff6\021\ufff6\022\ufff6\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\032\000\014\002\005\003\012\004\013\005\010\006" +
    "\006\001\001\000\002\001\001\000\016\002\015\003\012" +
    "\004\013\005\010\006\006\007\032\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\002\025\003\012\004\013" +
    "\005\010\006\006\010\024\001\001\000\002\001\001\000" +
    "\016\002\015\003\012\004\013\005\010\006\006\007\016" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\002\017\003\012\004\013" +
    "\005\010\006\006\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\002\030\003" +
    "\012\004\013\005\010\006\006\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\002\017\003" +
    "\012\004\013\005\010\006\006\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$PatternParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$PatternParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$PatternParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


 
	public void syntax_error(Symbol cur_token){
		report_error("Syntax Error on line "+cur_token.left+" column "+cur_token.right,null);
	}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$PatternParser$actions {
  private final PatternParser parser;

  /** Constructor */
  CUP$PatternParser$actions(PatternParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$PatternParser$do_action(
    int                        CUP$PatternParser$act_num,
    java_cup.runtime.lr_parser CUP$PatternParser$parser,
    java.util.Stack            CUP$PatternParser$stack,
    int                        CUP$PatternParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$PatternParser$result;

      /* select the action based on the action number */
      switch (CUP$PatternParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // orToken ::= LPARAE orList RPARAE 
            {
              OrToken RESULT =null;
		int tlleft = ((java_cup.runtime.Symbol)CUP$PatternParser$stack.elementAt(CUP$PatternParser$top-1)).left;
		int tlright = ((java_cup.runtime.Symbol)CUP$PatternParser$stack.elementAt(CUP$PatternParser$top-1)).right;
		ArrayList<Token> tl = (ArrayList<Token>)((java_cup.runtime.Symbol) CUP$PatternParser$stack.elementAt(CUP$PatternParser$top-1)).value;
			RESULT = new OrToken(tl);	
              CUP$PatternParser$result = parser.getSymbolFactory().newSymbol("orToken",4, ((java_cup.runtime.Symbol)CUP$PatternParser$stack.elementAt(CUP$PatternParser$top-2)), ((java_cup.runtime.Symbol)CUP$PatternParser$stack.peek()), RESULT);
            }
          return CUP$PatternParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // setToken ::= LBRACK tokenList RBRACK LT KEYWORD RT 
            {
              SetToken RESULT =null;
		int tlleft = ((java_cup.runtime.Symbol)CUP$PatternParser$stack.elementAt(CUP$PatternParser$top-4)).left;
		int tlright = ((java_cup.runtime.Symbol)CUP$PatternParser$stack.elementAt(CUP$PatternParser$top-4)).right;
		ArrayList<Token> tl = (ArrayList<Token>)((java_cup.runtime.Symbol) CUP$PatternParser$stack.elementAt(CUP$PatternParser$top-4)).value;
		int numleft = ((java_cup.runtime.Symbol)CUP$PatternParser$stack.elementAt(CUP$PatternParser$top-1)).left;
		int numright = ((java_cup.runtime.Symbol)CUP$PatternParser$stack.elementAt(CUP$PatternParser$top-1)).right;
		String num = (String)((java_cup.runtime.Symbol) CUP$PatternParser$stack.elementAt(CUP$PatternParser$top-1)).value;
			RESULT = new SetToken(tl,Integer.parseInt(num));	
              CUP$PatternParser$result = parser.getSymbolFactory().newSymbol("setToken",3, ((java_cup.runtime.Symbol)CUP$PatternParser$stack.elementAt(CUP$PatternParser$top-5)), ((java_cup.runtime.Symbol)CUP$PatternParser$stack.peek()), RESULT);
            }
          return CUP$PatternParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // seqToken ::= LBRACE tokenList RBRACE 
            {
              SeqToken RESULT =null;
		int tlleft = ((java_cup.runtime.Symbol)CUP$PatternParser$stack.elementAt(CUP$PatternParser$top-1)).left;
		int tlright = ((java_cup.runtime.Symbol)CUP$PatternParser$stack.elementAt(CUP$PatternParser$top-1)).right;
		ArrayList<Token> tl = (ArrayList<Token>)((java_cup.runtime.Symbol) CUP$PatternParser$stack.elementAt(CUP$PatternParser$top-1)).value;
			RESULT = new SeqToken(tl);	
              CUP$PatternParser$result = parser.getSymbolFactory().newSymbol("seqToken",2, ((java_cup.runtime.Symbol)CUP$PatternParser$stack.elementAt(CUP$PatternParser$top-2)), ((java_cup.runtime.Symbol)CUP$PatternParser$stack.peek()), RESULT);
            }
          return CUP$PatternParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // singleToken ::= ENTITY 
            {
              SingleToken RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PatternParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PatternParser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$PatternParser$stack.peek()).value;
			RESULT = new EntityToken(e);
              CUP$PatternParser$result = parser.getSymbolFactory().newSymbol("singleToken",1, ((java_cup.runtime.Symbol)CUP$PatternParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PatternParser$stack.peek()), RESULT);
            }
          return CUP$PatternParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // singleToken ::= KEYWORD 
            {
              SingleToken RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$PatternParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$PatternParser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$PatternParser$stack.peek()).value;
			RESULT = new KeywordToken(t);	
              CUP$PatternParser$result = parser.getSymbolFactory().newSymbol("singleToken",1, ((java_cup.runtime.Symbol)CUP$PatternParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PatternParser$stack.peek()), RESULT);
            }
          return CUP$PatternParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // orList ::= orList VERLINE token 
            {
              ArrayList<Token> RESULT =null;
		int tlleft = ((java_cup.runtime.Symbol)CUP$PatternParser$stack.elementAt(CUP$PatternParser$top-2)).left;
		int tlright = ((java_cup.runtime.Symbol)CUP$PatternParser$stack.elementAt(CUP$PatternParser$top-2)).right;
		ArrayList<Token> tl = (ArrayList<Token>)((java_cup.runtime.Symbol) CUP$PatternParser$stack.elementAt(CUP$PatternParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$PatternParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$PatternParser$stack.peek()).right;
		Token t = (Token)((java_cup.runtime.Symbol) CUP$PatternParser$stack.peek()).value;
			tl.add(t);	RESULT=tl;	
              CUP$PatternParser$result = parser.getSymbolFactory().newSymbol("orList",6, ((java_cup.runtime.Symbol)CUP$PatternParser$stack.elementAt(CUP$PatternParser$top-2)), ((java_cup.runtime.Symbol)CUP$PatternParser$stack.peek()), RESULT);
            }
          return CUP$PatternParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // orList ::= token 
            {
              ArrayList<Token> RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$PatternParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$PatternParser$stack.peek()).right;
		Token t = (Token)((java_cup.runtime.Symbol) CUP$PatternParser$stack.peek()).value;
			ArrayList<Token> tl=new ArrayList<Token>();		tl.add(t);	RESULT=tl;	
              CUP$PatternParser$result = parser.getSymbolFactory().newSymbol("orList",6, ((java_cup.runtime.Symbol)CUP$PatternParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PatternParser$stack.peek()), RESULT);
            }
          return CUP$PatternParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // tokenList ::= tokenList token 
            {
              ArrayList<Token> RESULT =null;
		int tlleft = ((java_cup.runtime.Symbol)CUP$PatternParser$stack.elementAt(CUP$PatternParser$top-1)).left;
		int tlright = ((java_cup.runtime.Symbol)CUP$PatternParser$stack.elementAt(CUP$PatternParser$top-1)).right;
		ArrayList<Token> tl = (ArrayList<Token>)((java_cup.runtime.Symbol) CUP$PatternParser$stack.elementAt(CUP$PatternParser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$PatternParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$PatternParser$stack.peek()).right;
		Token t = (Token)((java_cup.runtime.Symbol) CUP$PatternParser$stack.peek()).value;
			tl.add(t);	RESULT=tl;	
              CUP$PatternParser$result = parser.getSymbolFactory().newSymbol("tokenList",5, ((java_cup.runtime.Symbol)CUP$PatternParser$stack.elementAt(CUP$PatternParser$top-1)), ((java_cup.runtime.Symbol)CUP$PatternParser$stack.peek()), RESULT);
            }
          return CUP$PatternParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // tokenList ::= token 
            {
              ArrayList<Token> RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$PatternParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$PatternParser$stack.peek()).right;
		Token t = (Token)((java_cup.runtime.Symbol) CUP$PatternParser$stack.peek()).value;
			ArrayList<Token> tl=new ArrayList<Token>();		tl.add(t);	RESULT=tl;	
              CUP$PatternParser$result = parser.getSymbolFactory().newSymbol("tokenList",5, ((java_cup.runtime.Symbol)CUP$PatternParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PatternParser$stack.peek()), RESULT);
            }
          return CUP$PatternParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // token ::= orToken 
            {
              Token RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$PatternParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$PatternParser$stack.peek()).right;
		OrToken t = (OrToken)((java_cup.runtime.Symbol) CUP$PatternParser$stack.peek()).value;
			RESULT = t;	
              CUP$PatternParser$result = parser.getSymbolFactory().newSymbol("token",0, ((java_cup.runtime.Symbol)CUP$PatternParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PatternParser$stack.peek()), RESULT);
            }
          return CUP$PatternParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // token ::= setToken 
            {
              Token RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$PatternParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$PatternParser$stack.peek()).right;
		SetToken t = (SetToken)((java_cup.runtime.Symbol) CUP$PatternParser$stack.peek()).value;
			RESULT = t;	
              CUP$PatternParser$result = parser.getSymbolFactory().newSymbol("token",0, ((java_cup.runtime.Symbol)CUP$PatternParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PatternParser$stack.peek()), RESULT);
            }
          return CUP$PatternParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // token ::= seqToken 
            {
              Token RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$PatternParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$PatternParser$stack.peek()).right;
		SeqToken t = (SeqToken)((java_cup.runtime.Symbol) CUP$PatternParser$stack.peek()).value;
			RESULT = t;	
              CUP$PatternParser$result = parser.getSymbolFactory().newSymbol("token",0, ((java_cup.runtime.Symbol)CUP$PatternParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PatternParser$stack.peek()), RESULT);
            }
          return CUP$PatternParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // token ::= singleToken 
            {
              Token RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$PatternParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$PatternParser$stack.peek()).right;
		SingleToken t = (SingleToken)((java_cup.runtime.Symbol) CUP$PatternParser$stack.peek()).value;
			RESULT = t;	
              CUP$PatternParser$result = parser.getSymbolFactory().newSymbol("token",0, ((java_cup.runtime.Symbol)CUP$PatternParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PatternParser$stack.peek()), RESULT);
            }
          return CUP$PatternParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= token EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$PatternParser$stack.elementAt(CUP$PatternParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$PatternParser$stack.elementAt(CUP$PatternParser$top-1)).right;
		Token start_val = (Token)((java_cup.runtime.Symbol) CUP$PatternParser$stack.elementAt(CUP$PatternParser$top-1)).value;
		RESULT = start_val;
              CUP$PatternParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$PatternParser$stack.elementAt(CUP$PatternParser$top-1)), ((java_cup.runtime.Symbol)CUP$PatternParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$PatternParser$parser.done_parsing();
          return CUP$PatternParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

