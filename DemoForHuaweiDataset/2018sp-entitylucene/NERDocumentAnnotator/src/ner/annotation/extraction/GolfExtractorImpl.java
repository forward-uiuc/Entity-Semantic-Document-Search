/* The following code was generated by JFlex 1.6.1 */

package ner.annotation.extraction;
import ner.annotation.EntityAnnotation;
import ner.annotation.EntityCatalog;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>testout.jflex</tt>
 */
public final class GolfExtractorImpl {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\12\0\1\0\1\0\1\0\1\0\22\0\1\5\5\0\1\52\1\27"+
    "\1\47\1\50\3\0\1\45\2\0\1\2\1\3\1\1\1\4\1\25"+
    "\1\16\1\44\1\46\1\37\1\36\7\0\1\7\1\31\1\26\1\22"+
    "\1\12\1\34\1\33\1\23\1\20\1\54\1\35\1\17\1\10\1\15"+
    "\1\14\1\11\1\57\1\13\1\30\1\6\1\24\1\42\1\32\1\51"+
    "\1\41\1\40\6\0\1\7\1\31\1\26\1\22\1\12\1\34\1\33"+
    "\1\23\1\20\1\54\1\35\1\17\1\10\1\15\1\14\1\11\1\57"+
    "\1\13\1\30\1\6\1\24\1\42\1\32\1\51\1\41\1\40\12\0"+
    "\1\0\73\0\1\56\7\0\1\21\1\55\2\0\1\60\16\0\1\43"+
    "\4\0\1\56\7\0\1\21\1\55\2\0\1\60\16\0\1\43\63\0"+
    "\2\20\115\0\1\30\u1e93\0\1\53\24\0\1\0\1\0\u0100\0\1\35"+
    "\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udee5\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\3\1\u021a\0\1\2\u0486\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[1701];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\61\0\142\0\223\0\304\0\365\0\u0126\0\u0157"+
    "\0\u0188\0\u01b9\0\u01ea\0\u021b\0\u024c\0\u027d\0\u02ae\0\u02df"+
    "\0\u0310\0\u0341\0\u0372\0\u03a3\0\u03d4\0\u0405\0\u0436\0\u0467"+
    "\0\u0498\0\u04c9\0\u04fa\0\u052b\0\u055c\0\u058d\0\u05be\0\u05ef"+
    "\0\u0620\0\u0651\0\u0682\0\u06b3\0\u06e4\0\u0715\0\u0746\0\u0777"+
    "\0\u07a8\0\u07d9\0\u080a\0\u083b\0\u086c\0\u089d\0\u08ce\0\u08ff"+
    "\0\u0930\0\u0961\0\u0992\0\u09c3\0\u09f4\0\u0a25\0\u0a56\0\u0a87"+
    "\0\u0ab8\0\u0ae9\0\u0b1a\0\u0b4b\0\u0b7c\0\u0bad\0\u0bde\0\u0c0f"+
    "\0\u0c40\0\u0c71\0\u0ca2\0\u0cd3\0\u0d04\0\u0d35\0\u0d66\0\u0d97"+
    "\0\u0dc8\0\u0df9\0\u0e2a\0\u0e5b\0\u0e8c\0\u0ebd\0\u0eee\0\u0f1f"+
    "\0\u0f50\0\u0f81\0\u0fb2\0\u0fe3\0\u1014\0\u1045\0\u1076\0\u10a7"+
    "\0\u10d8\0\u1109\0\u113a\0\u116b\0\u119c\0\u11cd\0\u11fe\0\u122f"+
    "\0\u1260\0\u1291\0\u12c2\0\u12f3\0\u1324\0\u1355\0\u1386\0\u13b7"+
    "\0\u13e8\0\u1419\0\u144a\0\u147b\0\u14ac\0\u14dd\0\u150e\0\u153f"+
    "\0\u1570\0\u15a1\0\u15d2\0\u1603\0\u1634\0\u1665\0\u1696\0\u16c7"+
    "\0\u16f8\0\u1729\0\u175a\0\u178b\0\u17bc\0\u17ed\0\u181e\0\u184f"+
    "\0\u1880\0\u18b1\0\u18e2\0\u1913\0\u1944\0\u1975\0\u19a6\0\u19d7"+
    "\0\u1a08\0\u1a39\0\u1a6a\0\u1a9b\0\u1acc\0\u1afd\0\u1b2e\0\u1b5f"+
    "\0\u1b90\0\u1bc1\0\u1bf2\0\u1c23\0\u1c54\0\u1c85\0\u1cb6\0\u1ce7"+
    "\0\u1d18\0\u1d49\0\u1d7a\0\u1dab\0\u1ddc\0\u1e0d\0\u1e3e\0\u1e6f"+
    "\0\u1ea0\0\u1ed1\0\u1f02\0\u1f33\0\u1f64\0\u1f95\0\u1fc6\0\u1ff7"+
    "\0\u2028\0\u2059\0\u208a\0\u20bb\0\u20ec\0\u211d\0\u214e\0\u217f"+
    "\0\u21b0\0\u21e1\0\u2212\0\u2243\0\u2274\0\u22a5\0\u22d6\0\u2307"+
    "\0\u2338\0\u2369\0\u239a\0\u23cb\0\u23fc\0\u242d\0\u245e\0\u248f"+
    "\0\u24c0\0\u24f1\0\u2522\0\u2553\0\u2584\0\u25b5\0\u25e6\0\u2617"+
    "\0\u2648\0\u2679\0\u26aa\0\u26db\0\u270c\0\u273d\0\u276e\0\u279f"+
    "\0\u27d0\0\u2801\0\u2832\0\u2863\0\u2894\0\u28c5\0\u28f6\0\u2927"+
    "\0\u2958\0\u2989\0\u29ba\0\u29eb\0\u2a1c\0\u2a4d\0\u2a7e\0\u2aaf"+
    "\0\u2ae0\0\u2b11\0\u2b42\0\u2b73\0\u2ba4\0\u2bd5\0\u2c06\0\u2c37"+
    "\0\u2c68\0\u2c99\0\u2cca\0\u2cfb\0\u2d2c\0\u2d5d\0\u2d8e\0\u2dbf"+
    "\0\u2df0\0\u2e21\0\u2e52\0\u2e83\0\u2eb4\0\u2ee5\0\u2f16\0\u2f47"+
    "\0\u2f78\0\u2fa9\0\u2fda\0\u300b\0\u303c\0\u306d\0\u309e\0\u30cf"+
    "\0\u3100\0\u3131\0\u3162\0\u3193\0\u31c4\0\u31f5\0\u3226\0\u3257"+
    "\0\u3288\0\u32b9\0\u32ea\0\u331b\0\u334c\0\u337d\0\u33ae\0\u33df"+
    "\0\u3410\0\u3441\0\u3472\0\u34a3\0\u34d4\0\u3505\0\u3536\0\u3567"+
    "\0\u3598\0\u35c9\0\u35fa\0\u362b\0\u365c\0\u368d\0\u36be\0\u36ef"+
    "\0\u3720\0\u3751\0\u3782\0\u37b3\0\u37e4\0\u3815\0\u3846\0\u3877"+
    "\0\u38a8\0\u38d9\0\u390a\0\u393b\0\u396c\0\u399d\0\u39ce\0\u39ff"+
    "\0\u3a30\0\u3a61\0\u3a92\0\u3ac3\0\u3af4\0\u3b25\0\u3b56\0\u3b87"+
    "\0\u3bb8\0\u3be9\0\u3c1a\0\u3c4b\0\u3c7c\0\u3cad\0\u3cde\0\u3d0f"+
    "\0\u3d40\0\u3d71\0\u3da2\0\u3dd3\0\u3e04\0\u3e35\0\u3e66\0\u3e97"+
    "\0\u3ec8\0\u3ef9\0\u3f2a\0\u3f5b\0\u3f8c\0\u3fbd\0\u3fee\0\u401f"+
    "\0\u4050\0\u4081\0\u40b2\0\u40e3\0\u4114\0\u4145\0\u4176\0\u41a7"+
    "\0\u41d8\0\u4209\0\u423a\0\u426b\0\u429c\0\u42cd\0\u42fe\0\u432f"+
    "\0\u4360\0\u4391\0\u43c2\0\u43f3\0\u4424\0\u4455\0\u4486\0\u44b7"+
    "\0\u44e8\0\u4519\0\u454a\0\u457b\0\u45ac\0\u45dd\0\u460e\0\u463f"+
    "\0\u4670\0\u46a1\0\u46d2\0\u4703\0\u4734\0\u4765\0\u4796\0\u47c7"+
    "\0\u47f8\0\u4829\0\u485a\0\u488b\0\u48bc\0\u48ed\0\u491e\0\u494f"+
    "\0\u4980\0\u49b1\0\u49e2\0\u4a13\0\u4a44\0\u4a75\0\u4aa6\0\u4ad7"+
    "\0\u4b08\0\u4b39\0\u4b6a\0\u4b9b\0\u4bcc\0\u4bfd\0\u4c2e\0\u4c5f"+
    "\0\u4c90\0\u4cc1\0\u4cf2\0\u4d23\0\u4d54\0\u4d85\0\u4db6\0\u4de7"+
    "\0\u4e18\0\u4e49\0\u4e7a\0\u4eab\0\u4edc\0\u4f0d\0\u4f3e\0\u4f6f"+
    "\0\u4fa0\0\u4fd1\0\u5002\0\u5033\0\u5064\0\u5095\0\u50c6\0\u50f7"+
    "\0\u5128\0\u5159\0\u518a\0\u51bb\0\u51ec\0\u521d\0\u524e\0\u527f"+
    "\0\u52b0\0\u52e1\0\u5312\0\u5343\0\u5374\0\u53a5\0\u53d6\0\u5407"+
    "\0\u5438\0\u5469\0\u549a\0\u54cb\0\u54fc\0\u552d\0\u555e\0\u558f"+
    "\0\u55c0\0\u55f1\0\u5622\0\u5653\0\u5684\0\u56b5\0\u56e6\0\u5717"+
    "\0\u5748\0\u5779\0\u57aa\0\u57db\0\u580c\0\u583d\0\u586e\0\u589f"+
    "\0\u58d0\0\u5901\0\u5932\0\u5963\0\u5994\0\u59c5\0\u59f6\0\u5a27"+
    "\0\u5a58\0\u5a89\0\u5aba\0\u5aeb\0\u5b1c\0\u5b4d\0\u5b7e\0\u5baf"+
    "\0\u5be0\0\u5c11\0\u5c42\0\u5c73\0\u5ca4\0\u5cd5\0\u5d06\0\u5d37"+
    "\0\u5d68\0\u5d99\0\u5dca\0\u5dfb\0\u5e2c\0\u5e5d\0\u5e8e\0\u5ebf"+
    "\0\u5ef0\0\u5f21\0\u5f52\0\u5f83\0\u5fb4\0\u5fe5\0\u6016\0\u6047"+
    "\0\u6078\0\u60a9\0\u60da\0\u610b\0\u613c\0\u616d\0\u619e\0\u61cf"+
    "\0\u6200\0\u6231\0\u6262\0\u6293\0\u62c4\0\u62f5\0\u6326\0\u6357"+
    "\0\u6388\0\u63b9\0\u63ea\0\u641b\0\u644c\0\u647d\0\u64ae\0\u64df"+
    "\0\u6510\0\u6541\0\u6572\0\u65a3\0\u65d4\0\u6605\0\u6636\0\u6667"+
    "\0\u6698\0\u66c9\0\u66fa\0\u672b\0\u675c\0\u678d\0\61\0\u67be"+
    "\0\u67ef\0\u6820\0\u6851\0\u6882\0\u68b3\0\u68e4\0\u6915\0\u6946"+
    "\0\u6977\0\u69a8\0\u69d9\0\u6a0a\0\u6a3b\0\u6a6c\0\u6a9d\0\u6ace"+
    "\0\u6aff\0\u6b30\0\u6b61\0\u6b92\0\u6bc3\0\u6bf4\0\u6c25\0\u6c56"+
    "\0\u6c87\0\u6cb8\0\u6ce9\0\u6d1a\0\u6d4b\0\u6d7c\0\u6dad\0\u6dde"+
    "\0\u6e0f\0\u6e40\0\u6e71\0\u6ea2\0\u6ed3\0\u6f04\0\u6f35\0\u6f66"+
    "\0\u6f97\0\u6fc8\0\u6ff9\0\u702a\0\u705b\0\u708c\0\u70bd\0\u70ee"+
    "\0\u711f\0\u7150\0\u7181\0\u71b2\0\u71e3\0\u7214\0\u7245\0\u7276"+
    "\0\u72a7\0\u72d8\0\u7309\0\u733a\0\u736b\0\u739c\0\u73cd\0\u73fe"+
    "\0\u742f\0\u7460\0\u7491\0\u74c2\0\u74f3\0\u7524\0\u7555\0\u7586"+
    "\0\u75b7\0\u75e8\0\u7619\0\u764a\0\u767b\0\u76ac\0\u76dd\0\u770e"+
    "\0\u773f\0\u7770\0\u77a1\0\u77d2\0\u7803\0\u7834\0\u7865\0\u7896"+
    "\0\u78c7\0\u78f8\0\u7929\0\u795a\0\u798b\0\u79bc\0\u79ed\0\u7a1e"+
    "\0\u7a4f\0\u7a80\0\u7ab1\0\u7ae2\0\u7b13\0\u7b44\0\u7b75\0\u7ba6"+
    "\0\u7bd7\0\u7c08\0\u7c39\0\u7c6a\0\u7c9b\0\u7ccc\0\u7cfd\0\u7d2e"+
    "\0\u7d5f\0\u7d90\0\u7dc1\0\u7df2\0\u7e23\0\u7e54\0\u7e85\0\u7eb6"+
    "\0\u7ee7\0\u7f18\0\u7f49\0\u7f7a\0\u7fab\0\u7fdc\0\u800d\0\u803e"+
    "\0\u806f\0\u80a0\0\u80d1\0\u8102\0\u8133\0\u8164\0\u8195\0\u81c6"+
    "\0\u81f7\0\u8228\0\u8259\0\u828a\0\u82bb\0\u82ec\0\u831d\0\u834e"+
    "\0\u837f\0\u83b0\0\u83e1\0\u8412\0\u8443\0\u8474\0\u84a5\0\u84d6"+
    "\0\u8507\0\u8538\0\u8569\0\u859a\0\u85cb\0\u85fc\0\u862d\0\u865e"+
    "\0\u868f\0\u86c0\0\u86f1\0\u8722\0\u8753\0\u8784\0\u87b5\0\u87e6"+
    "\0\u8817\0\u8848\0\u8879\0\u88aa\0\u88db\0\u890c\0\u893d\0\u896e"+
    "\0\u899f\0\u89d0\0\u8a01\0\u8a32\0\u8a63\0\u8a94\0\u8ac5\0\u8af6"+
    "\0\u8b27\0\u8b58\0\u8b89\0\u8bba\0\u8beb\0\u8c1c\0\u8c4d\0\u8c7e"+
    "\0\u8caf\0\u8ce0\0\u8d11\0\u8d42\0\u8d73\0\u8da4\0\u8dd5\0\u8e06"+
    "\0\u8e37\0\u8e68\0\u8e99\0\u8eca\0\u8efb\0\u8f2c\0\u8f5d\0\u8f8e"+
    "\0\u8fbf\0\u8ff0\0\u9021\0\u9052\0\u9083\0\u90b4\0\u90e5\0\u9116"+
    "\0\u9147\0\u9178\0\u91a9\0\u91da\0\u920b\0\u923c\0\u926d\0\u929e"+
    "\0\u92cf\0\u9300\0\u9331\0\u9362\0\u9393\0\u93c4\0\u93f5\0\u9426"+
    "\0\u9457\0\u9488\0\u94b9\0\u94ea\0\u951b\0\u954c\0\u957d\0\u95ae"+
    "\0\u95df\0\u9610\0\u9641\0\u9672\0\u96a3\0\u96d4\0\u9705\0\u9736"+
    "\0\u9767\0\u9798\0\u97c9\0\u97fa\0\u982b\0\u985c\0\u988d\0\u98be"+
    "\0\u98ef\0\u9920\0\u9951\0\u9982\0\u99b3\0\u99e4\0\u9a15\0\u9a46"+
    "\0\u9a77\0\u9aa8\0\u9ad9\0\u9b0a\0\u9b3b\0\u9b6c\0\u9b9d\0\u9bce"+
    "\0\u9bff\0\u9c30\0\u9c61\0\u9c92\0\u9cc3\0\u9cf4\0\u9d25\0\u9d56"+
    "\0\u9d87\0\u9db8\0\u9de9\0\u9e1a\0\u9e4b\0\u9e7c\0\u9ead\0\u9ede"+
    "\0\u9f0f\0\u9f40\0\u9f71\0\u9fa2\0\u9fd3\0\ua004\0\ua035\0\ua066"+
    "\0\ua097\0\ua0c8\0\ua0f9\0\ua12a\0\ua15b\0\ua18c\0\ua1bd\0\ua1ee"+
    "\0\ua21f\0\ua250\0\ua281\0\ua2b2\0\ua2e3\0\ua314\0\ua345\0\ua376"+
    "\0\ua3a7\0\ua3d8\0\ua409\0\ua43a\0\ua46b\0\ua49c\0\ua4cd\0\ua4fe"+
    "\0\ua52f\0\ua560\0\ua591\0\ua5c2\0\ua5f3\0\ua624\0\ua655\0\ua686"+
    "\0\ua6b7\0\ua6e8\0\ua719\0\ua74a\0\ua77b\0\ua7ac\0\ua7dd\0\ua80e"+
    "\0\ua83f\0\ua870\0\ua8a1\0\ua8d2\0\ua903\0\ua934\0\ua965\0\ua996"+
    "\0\ua9c7\0\ua9f8\0\uaa29\0\uaa5a\0\uaa8b\0\uaabc\0\uaaed\0\uab1e"+
    "\0\uab4f\0\uab80\0\uabb1\0\uabe2\0\uac13\0\uac44\0\uac75\0\uaca6"+
    "\0\uacd7\0\uad08\0\uad39\0\uad6a\0\uad9b\0\uadcc\0\uadfd\0\uae2e"+
    "\0\uae5f\0\uae90\0\uaec1\0\uaef2\0\uaf23\0\uaf54\0\uaf85\0\uafb6"+
    "\0\uafe7\0\ub018\0\ub049\0\ub07a\0\ub0ab\0\ub0dc\0\ub10d\0\ub13e"+
    "\0\ub16f\0\ub1a0\0\ub1d1\0\ub202\0\ub233\0\ub264\0\ub295\0\ub2c6"+
    "\0\ub2f7\0\ub328\0\ub359\0\ub38a\0\ub3bb\0\ub3ec\0\ub41d\0\ub44e"+
    "\0\ub47f\0\ub4b0\0\ub4e1\0\ub512\0\ub543\0\ub574\0\ub5a5\0\ub5d6"+
    "\0\ub607\0\ub638\0\ub669\0\ub69a\0\ub6cb\0\ub6fc\0\ub72d\0\ub75e"+
    "\0\ub78f\0\ub7c0\0\ub7f1\0\ub822\0\ub853\0\ub884\0\ub8b5\0\ub8e6"+
    "\0\ub917\0\ub948\0\ub979\0\ub9aa\0\ub9db\0\uba0c\0\uba3d\0\uba6e"+
    "\0\uba9f\0\ubad0\0\ubb01\0\ubb32\0\ubb63\0\ubb94\0\ubbc5\0\ubbf6"+
    "\0\ubc27\0\ubc58\0\ubc89\0\ubcba\0\ubceb\0\ubd1c\0\ubd4d\0\ubd7e"+
    "\0\ubdaf\0\ubde0\0\ube11\0\ube42\0\ube73\0\ubea4\0\ubed5\0\ubf06"+
    "\0\ubf37\0\ubf68\0\ubf99\0\ubfca\0\ubffb\0\uc02c\0\uc05d\0\uc08e"+
    "\0\uc0bf\0\uc0f0\0\uc121\0\uc152\0\uc183\0\uc1b4\0\uc1e5\0\uc216"+
    "\0\uc247\0\uc278\0\uc2a9\0\uc2da\0\uc30b\0\uc33c\0\uc36d\0\uc39e"+
    "\0\uc3cf\0\uc400\0\uc431\0\uc462\0\uc493\0\uc4c4\0\uc4f5\0\uc526"+
    "\0\uc557\0\uc588\0\uc5b9\0\uc5ea\0\uc61b\0\uc64c\0\uc67d\0\uc6ae"+
    "\0\uc6df\0\uc710\0\uc741\0\uc772\0\uc7a3\0\uc7d4\0\uc805\0\uc836"+
    "\0\uc867\0\uc898\0\uc8c9\0\uc8fa\0\uc92b\0\uc95c\0\uc98d\0\uc9be"+
    "\0\uc9ef\0\uca20\0\uca51\0\uca82\0\ucab3\0\ucae4\0\ucb15\0\ucb46"+
    "\0\ucb77\0\ucba8\0\ucbd9\0\ucc0a\0\ucc3b\0\ucc6c\0\ucc9d\0\uccce"+
    "\0\uccff\0\ucd30\0\ucd61\0\ucd92\0\ucdc3\0\ucdf4\0\uce25\0\uce56"+
    "\0\uce87\0\uceb8\0\ucee9\0\ucf1a\0\ucf4b\0\ucf7c\0\ucfad\0\ucfde"+
    "\0\ud00f\0\ud040\0\ud071\0\ud0a2\0\ud0d3\0\ud104\0\ud135\0\ud166"+
    "\0\ud197\0\ud1c8\0\ud1f9\0\ud22a\0\ud25b\0\ud28c\0\ud2bd\0\ud2ee"+
    "\0\ud31f\0\ud350\0\ud381\0\ud3b2\0\ud3e3\0\ud414\0\ud445\0\ud476"+
    "\0\ud4a7\0\ud4d8\0\ud509\0\ud53a\0\ud56b\0\ud59c\0\ud5cd\0\ud5fe"+
    "\0\ud62f\0\ud660\0\ud691\0\ud6c2\0\ud6f3\0\ud724\0\ud755\0\ud786"+
    "\0\ud7b7\0\ud7e8\0\ud819\0\ud84a\0\ud87b\0\ud8ac\0\ud8dd\0\ud90e"+
    "\0\ud93f\0\ud970\0\ud9a1\0\ud9d2\0\uda03\0\uda34\0\uda65\0\uda96"+
    "\0\udac7\0\udaf8\0\udb29\0\udb5a\0\udb8b\0\udbbc\0\udbed\0\udc1e"+
    "\0\udc4f\0\udc80\0\udcb1\0\udce2\0\udd13\0\udd44\0\udd75\0\udda6"+
    "\0\uddd7\0\ude08\0\ude39\0\ude6a\0\ude9b\0\udecc\0\udefd\0\udf2e"+
    "\0\udf5f\0\udf90\0\udfc1\0\udff2\0\ue023\0\ue054\0\ue085\0\ue0b6"+
    "\0\ue0e7\0\ue118\0\ue149\0\ue17a\0\ue1ab\0\ue1dc\0\ue20d\0\ue23e"+
    "\0\ue26f\0\ue2a0\0\ue2d1\0\ue302\0\ue333\0\ue364\0\ue395\0\ue3c6"+
    "\0\ue3f7\0\ue428\0\ue459\0\ue48a\0\ue4bb\0\ue4ec\0\ue51d\0\ue54e"+
    "\0\ue57f\0\ue5b0\0\ue5e1\0\ue612\0\ue643\0\ue674\0\ue6a5\0\ue6d6"+
    "\0\ue707\0\ue738\0\ue769\0\ue79a\0\ue7cb\0\ue7fc\0\ue82d\0\ue85e"+
    "\0\ue88f\0\ue8c0\0\ue8f1\0\ue922\0\ue953\0\ue984\0\ue9b5\0\ue9e6"+
    "\0\uea17\0\uea48\0\uea79\0\ueaaa\0\ueadb\0\ueb0c\0\ueb3d\0\ueb6e"+
    "\0\ueb9f\0\uebd0\0\uec01\0\uec32\0\uec63\0\uec94\0\uecc5\0\uecf6"+
    "\0\ued27\0\ued58\0\ued89\0\uedba\0\uedeb\0\uee1c\0\uee4d\0\uee7e"+
    "\0\ueeaf\0\ueee0\0\uef11\0\uef42\0\uef73\0\uefa4\0\uefd5\0\uf006"+
    "\0\uf037\0\uf068\0\uf099\0\uf0ca\0\uf0fb\0\uf12c\0\uf15d\0\uf18e"+
    "\0\uf1bf\0\uf1f0\0\uf221\0\uf252\0\uf283\0\uf2b4\0\uf2e5\0\uf316"+
    "\0\uf347\0\uf378\0\uf3a9\0\uf3da\0\uf40b\0\uf43c\0\uf46d\0\uf49e"+
    "\0\uf4cf\0\uf500\0\uf531\0\uf562\0\uf593\0\uf5c4\0\uf5f5\0\uf626"+
    "\0\uf657\0\uf688\0\uf6b9\0\uf6ea\0\uf71b\0\uf74c\0\uf77d\0\uf7ae"+
    "\0\uf7df\0\uf810\0\uf841\0\uf872\0\uf8a3\0\uf8d4\0\uf905\0\uf936"+
    "\0\uf967\0\uf998\0\uf9c9\0\uf9fa\0\ufa2b\0\ufa5c\0\ufa8d\0\ufabe"+
    "\0\ufaef\0\ufb20\0\ufb51\0\ufb82\0\ufbb3\0\ufbe4\0\ufc15\0\ufc46"+
    "\0\ufc77\0\ufca8\0\ufcd9\0\ufd0a\0\ufd3b\0\ufd6c\0\ufd9d\0\ufdce"+
    "\0\ufdff\0\ufe30\0\ufe61\0\ufe92\0\ufec3\0\ufef4\0\uff25\0\uff56"+
    "\0\uff87\0\uffb8\0\uffe9\1\32\1\113\1\174\1\255\1\336"+
    "\1\u010f\1\u0140\1\u0171\1\u01a2\1\u01d3\1\u0204\1\u0235\1\u0266"+
    "\1\u0297\1\u02c8\1\u02f9\1\u032a\1\u035b\1\u038c\1\u03bd\1\u03ee"+
    "\1\u041f\1\u0450\1\u0481\1\u04b2\1\u04e3\1\u0514\1\u0545\1\u0576"+
    "\1\u05a7\1\u05d8\1\u0609\1\u063a\1\u066b\1\u069c\1\u06cd\1\u06fe"+
    "\1\u072f\1\u0760\1\u0791\1\u07c2\1\u07f3\1\u0824\1\u0855\1\u0886"+
    "\1\u08b7\1\u08e8\1\u0919\1\u094a\1\u097b\1\u09ac\1\u09dd\1\u0a0e"+
    "\1\u0a3f\1\u0a70\1\u0aa1\1\u0ad2\1\u0b03\1\u0b34\1\u0b65\1\u0b96"+
    "\1\u0bc7\1\u0bf8\1\u0c29\1\u0c5a\1\u0c8b\1\u0cbc\1\u0ced\1\u0d1e"+
    "\1\u0d4f\1\u0d80\1\u0db1\1\u0de2\1\u0e13\1\u0e44\1\u0e75\1\u0ea6"+
    "\1\u0ed7\1\u0f08\1\u0f39\1\u0f6a\1\u0f9b\1\u0fcc\1\u0ffd\1\u102e"+
    "\1\u105f\1\u1090\1\u10c1\1\u10f2\1\u1123\1\u1154\1\u1185\1\u11b6"+
    "\1\u11e7\1\u1218\1\u1249\1\u127a\1\u12ab\1\u12dc\1\u130d\1\u133e"+
    "\1\u136f\1\u13a0\1\u13d1\1\u1402\1\u1433\1\u1464\1\u1495\1\u14c6"+
    "\1\u14f7\1\u1528\1\u1559\1\u158a\1\u15bb\1\u15ec\1\u161d\1\u164e"+
    "\1\u167f\1\u16b0\1\u16e1\1\u1712\1\u1743\1\u1774\1\u17a5\1\u17d6"+
    "\1\u1807\1\u1838\1\u1869\1\u189a\1\u18cb\1\u18fc\1\u192d\1\u195e"+
    "\1\u198f\1\u19c0\1\u19f1\1\u1a22\1\u1a53\1\u1a84\1\u1ab5\1\u1ae6"+
    "\1\u1b17\1\u1b48\1\u1b79\1\u1baa\1\u1bdb\1\u1c0c\1\u1c3d\1\u1c6e"+
    "\1\u1c9f\1\u1cd0\1\u1d01\1\u1d32\1\u1d63\1\u1d94\1\u1dc5\1\u1df6"+
    "\1\u1e27\1\u1e58\1\u1e89\1\u1eba\1\u1eeb\1\u1f1c\1\u1f4d\1\u1f7e"+
    "\1\u1faf\1\u1fe0\1\u2011\1\u2042\1\u2073\1\u20a4\1\u20d5\1\u2106"+
    "\1\u2137\1\u2168\1\u2199\1\u21ca\1\u21fb\1\u222c\1\u225d\1\u228e"+
    "\1\u22bf\1\u22f0\1\u2321\1\u2352\1\u2383\1\u23b4\1\u23e5\1\u2416"+
    "\1\u2447\1\u2478\1\u24a9\1\u24da\1\u250b\1\u253c\1\u256d\1\u259e"+
    "\1\u25cf\1\u2600\1\u2631\1\u2662\1\u2693\1\u26c4\1\u26f5\1\u2726"+
    "\1\u2757\1\u2788\1\u27b9\1\u27ea\1\u281b\1\u284c\1\u287d\1\u28ae"+
    "\1\u28df\1\u2910\1\u2941\1\u2972\1\u29a3\1\u29d4\1\u2a05\1\u2a36"+
    "\1\u2a67\1\u2a98\1\u2ac9\1\u2afa\1\u2b2b\1\u2b5c\1\u2b8d\1\u2bbe"+
    "\1\u2bef\1\u2c20\1\u2c51\1\u2c82\1\u2cb3\1\u2ce4\1\u2d15\1\u2d46"+
    "\1\u2d77\1\u2da8\1\u2dd9\1\u2e0a\1\u2e3b\1\u2e6c\1\u2e9d\1\u2ece"+
    "\1\u2eff\1\u2f30\1\u2f61\1\u2f92\1\u2fc3\1\u2ff4\1\u3025\1\u3056"+
    "\1\u3087\1\u30b8\1\u30e9\1\u311a\1\u314b\1\u317c\1\u31ad\1\u31de"+
    "\1\u320f\1\u3240\1\u3271\1\u32a2\1\u32d3\1\u3304\1\u3335\1\u3366"+
    "\1\u3397\1\u33c8\1\u33f9\1\u342a\1\u345b\1\u348c\1\u34bd\1\u34ee"+
    "\1\u351f\1\u3550\1\u3581\1\u35b2\1\u35e3\1\u3614\1\u3645\1\u3676"+
    "\1\u36a7\1\u36d8\1\u3709\1\u373a\1\u376b\1\u379c\1\u37cd\1\u37fe"+
    "\1\u382f\1\u3860\1\u3891\1\u38c2\1\u38f3\1\u3924\1\u3955\1\u3986"+
    "\1\u39b7\1\u39e8\1\u3a19\1\u3a4a\1\u3a7b\1\u3aac\1\u3add\1\u3b0e"+
    "\1\u3b3f\1\u3b70\1\u3ba1\1\u3bd2\1\u3c03\1\u3c34\1\u3c65\1\u3c96"+
    "\1\u3cc7\1\u3cf8\1\u3d29\1\u3d5a\1\u3d8b\1\u3dbc\1\u3ded\1\u3e1e"+
    "\1\u3e4f\1\u3e80\1\u3eb1\1\u3ee2\1\u3f13\1\u3f44\1\u3f75\1\u3fa6"+
    "\1\u3fd7\1\u4008\1\u4039\1\u406a\1\u409b\1\u40cc\1\u40fd\1\u412e"+
    "\1\u415f\1\u4190\1\u41c1\1\u41f2\1\u4223\1\u4254\1\u4285\1\u42b6"+
    "\1\u42e7\1\u4318\1\u4349\1\u437a\1\u43ab\1\u43dc\1\u440d\1\u443e"+
    "\1\u446f\1\u44a0\1\u44d1\1\u4502\1\u4533";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[1701];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\2\1\4\55\2\63\0\1\5\114\0"+
    "\1\6\24\0\1\7\1\10\113\0\1\11\1\12\6\0"+
    "\1\13\13\0\1\14\23\0\1\15\10\0\1\16\1\17"+
    "\4\0\1\20\1\0\1\21\13\0\1\22\1\23\1\24"+
    "\1\25\11\0\1\26\6\0\1\27\16\0\1\30\17\0"+
    "\1\31\21\0\1\32\16\0\1\33\52\0\1\34\1\35"+
    "\46\0\1\36\10\0\1\37\27\0\1\40\60\0\1\41"+
    "\60\0\1\42\60\0\1\43\60\0\1\44\60\0\1\45"+
    "\60\0\1\46\60\0\1\47\60\0\1\50\60\0\1\51"+
    "\60\0\1\52\60\0\1\53\60\0\1\54\60\0\1\55"+
    "\60\0\1\56\60\0\1\57\60\0\1\60\60\0\1\61"+
    "\60\0\1\62\60\0\1\63\75\0\1\64\1\0\1\65"+
    "\66\0\1\66\54\0\1\67\1\0\1\70\1\0\1\71"+
    "\46\0\1\72\63\0\1\73\46\0\1\74\61\0\1\75"+
    "\1\0\1\76\3\0\1\77\5\0\1\100\25\0\1\101"+
    "\13\0\1\102\16\0\1\103\1\0\1\104\1\105\36\0"+
    "\1\106\3\0\1\107\53\0\1\110\1\111\2\0\1\75"+
    "\1\0\1\112\1\113\2\0\1\114\1\0\1\115\3\0"+
    "\1\116\1\0\1\117\1\120\1\121\1\122\1\0\1\123"+
    "\31\0\1\124\1\125\1\126\1\127\1\0\1\130\1\131"+
    "\1\132\1\0\1\133\6\0\1\134\4\0\1\135\1\136"+
    "\32\0\1\137\1\140\1\141\1\0\1\142\1\0\1\143"+
    "\3\0\1\144\1\0\1\145\1\146\1\147\1\0\1\150"+
    "\1\0\1\151\1\152\2\0\1\153\1\154\21\0\1\155"+
    "\10\0\1\156\12\0\1\157\1\73\11\0\1\160\57\0"+
    "\1\161\52\0\1\67\60\0\1\162\51\0\1\163\64\0"+
    "\1\164\44\0\1\165\60\0\1\166\75\0\1\167\64\0"+
    "\1\170\42\0\1\171\71\0\1\172\47\0\1\173\71\0"+
    "\1\174\43\0\1\175\66\0\1\176\53\0\1\177\57\0"+
    "\1\200\74\0\1\201\43\0\1\202\3\0\1\203\3\0"+
    "\1\204\52\0\1\205\101\0\1\206\42\0\1\207\15\0"+
    "\1\210\44\0\1\211\53\0\1\212\66\0\1\213\5\0"+
    "\1\214\47\0\1\207\60\0\1\215\55\0\1\216\2\0"+
    "\1\217\54\0\1\220\63\0\1\221\67\0\1\222\55\0"+
    "\1\223\12\0\1\224\44\0\1\225\53\0\1\226\71\0"+
    "\1\227\3\0\1\230\46\0\1\231\2\0\1\213\55\0"+
    "\1\232\55\0\1\233\65\0\1\234\7\0\1\235\43\0"+
    "\1\216\2\0\1\236\61\0\1\237\3\0\1\240\11\0"+
    "\1\241\36\0\1\242\64\0\1\243\57\0\1\244\57\0"+
    "\1\245\67\0\1\246\54\0\1\247\53\0\1\226\4\0"+
    "\1\250\64\0\1\251\70\0\1\252\37\0\1\216\4\0"+
    "\1\253\54\0\1\254\4\0\1\255\71\0\1\256\40\0"+
    "\1\200\1\0\1\257\61\0\1\260\55\0\1\261\6\0"+
    "\1\262\67\0\1\263\46\0\1\264\76\0\1\265\37\0"+
    "\1\226\13\0\1\266\46\0\1\267\1\270\62\0\1\271"+
    "\70\0\1\272\46\0\1\273\55\0\1\274\14\0\1\275"+
    "\54\0\1\276\52\0\1\277\57\0\1\300\62\0\1\301"+
    "\61\0\1\302\6\0\1\172\51\0\1\303\53\0\1\304"+
    "\61\0\1\305\101\0\1\306\60\0\1\307\34\0\1\310"+
    "\103\0\1\311\37\0\1\312\104\0\1\313\37\0\1\314"+
    "\102\0\1\315\35\0\1\316\75\0\1\317\55\0\1\320"+
    "\54\0\1\321\51\0\1\322\61\0\1\224\55\0\1\323"+
    "\62\0\1\324\60\0\1\325\103\0\1\326\33\0\1\327"+
    "\62\0\1\330\65\0\1\331\54\0\1\332\54\0\1\333"+
    "\106\0\1\334\35\0\1\335\56\0\1\336\63\0\1\337"+
    "\61\0\1\340\63\0\1\341\51\0\1\342\57\0\1\343"+
    "\105\0\1\344\36\0\1\345\101\0\1\346\67\0\1\347"+
    "\40\0\1\350\70\0\1\351\60\0\1\352\43\0\1\353"+
    "\60\0\1\354\62\0\1\355\76\0\1\356\32\0\1\357"+
    "\70\0\1\360\62\0\1\361\10\0\1\362\42\0\1\363"+
    "\110\0\1\364\30\0\1\365\63\0\1\366\56\0\1\367"+
    "\71\0\1\370\44\0\1\371\61\0\1\372\62\0\1\373"+
    "\57\0\1\374\103\0\1\375\45\0\1\376\47\0\1\377"+
    "\61\0\1\u0100\102\0\1\u0101\32\0\1\u0102\67\0\1\u0103"+
    "\63\0\1\u0104\46\0\1\u0105\61\0\1\u0106\60\0\1\u0107"+
    "\65\0\1\u0108\105\0\1\u0109\54\0\1\u010a\43\0\1\u010b"+
    "\46\0\1\u010c\72\0\1\u010d\53\0\1\u010e\64\0\1\u010f"+
    "\56\0\1\u0110\55\0\1\u0111\63\0\1\u0112\56\0\1\u0113"+
    "\64\0\1\u0114\53\0\1\u0115\63\0\1\u0116\52\0\1\u0117"+
    "\65\0\1\u0118\52\0\1\u0119\71\0\1\u011a\65\0\1\u011b"+
    "\46\0\1\u011c\53\0\1\u011d\63\0\1\u011e\70\0\1\u011f"+
    "\60\0\1\u0120\64\0\1\u0121\43\0\1\u0122\63\0\1\u0123"+
    "\57\0\1\u0124\54\0\1\u0125\67\0\1\u0126\53\0\1\u0127"+
    "\61\0\1\u0128\1\0\1\u0129\53\0\1\u012a\60\0\1\u012b"+
    "\61\0\1\u012c\72\0\1\u012d\51\0\1\u012e\62\0\1\u012f"+
    "\52\0\1\u0130\70\0\1\u0131\76\0\1\u0132\37\0\1\u0133"+
    "\62\0\1\u0134\51\0\1\u0135\64\0\1\u0136\61\0\1\u0137"+
    "\71\0\1\u0138\111\0\1\u0139\12\0\1\u013a\60\0\1\u013b"+
    "\64\0\1\u013c\72\0\1\u013d\51\0\1\u013e\55\0\1\u013f"+
    "\71\0\1\u0140\42\0\1\u0141\62\0\1\u0142\63\0\1\u0143"+
    "\76\0\1\u0144\44\0\1\u0145\61\0\1\u0146\76\0\1\u0147"+
    "\40\0\1\u0148\56\0\1\u0149\75\0\1\u014a\37\0\1\u014b"+
    "\62\0\1\u014c\122\0\1\u014d\16\0\1\u014e\65\0\1\u014f"+
    "\64\0\1\u0150\55\0\1\u0151\50\0\1\u0152\65\0\1\u0153"+
    "\65\0\1\u0154\60\0\1\u0155\50\0\1\u0156\64\0\1\u0157"+
    "\60\0\1\u0158\71\0\1\u0159\56\0\1\u015a\62\0\1\u015b"+
    "\50\0\1\u015c\53\0\1\u015d\57\0\1\u010b\100\0\1\u015e"+
    "\55\0\1\u015f\42\0\1\u0160\70\0\1\u0161\51\0\1\u0162"+
    "\65\0\1\u0163\64\0\1\u0164\54\0\1\u0165\52\0\1\u0166"+
    "\73\0\1\u0167\51\0\1\u0168\61\0\1\u0169\65\0\1\u016a"+
    "\54\0\1\u016b\64\0\1\u016c\76\0\1\u016d\32\0\1\u016e"+
    "\105\0\1\u016f\33\0\1\u0170\61\0\1\u0171\63\0\1\u0172"+
    "\60\0\1\u0173\57\0\1\u0174\74\0\1\u0175\47\0\1\u0176"+
    "\60\0\1\u0177\57\0\1\u0178\57\0\1\u0179\55\0\1\u017a"+
    "\61\0\1\u017b\61\0\1\u017c\62\0\1\u017d\56\0\1\u017e"+
    "\55\0\1\u017f\64\0\1\u0180\52\0\1\u0181\104\0\1\u0182"+
    "\42\0\1\u0183\56\0\1\u0184\75\0\1\u0185\44\0\1\u0186"+
    "\61\0\1\u0187\61\0\1\u0188\64\0\1\u0189\52\0\1\u018a"+
    "\60\0\1\u018b\55\0\1\224\61\0\1\u018c\70\0\1\u018d"+
    "\55\0\1\u018e\52\0\1\u018f\60\0\1\u0190\112\0\1\u0191"+
    "\32\0\1\u0192\65\0\1\u0193\57\0\1\u0194\46\0\1\u0195"+
    "\104\0\1\u010b\36\0\1\u0196\63\0\1\u0197\71\0\1\u0198"+
    "\70\0\1\u0199\66\0\1\u019a\64\0\1\u019b\26\0\1\u0177"+
    "\62\0\1\u019c\56\0\1\u019d\52\0\1\u019e\105\0\1\u019f"+
    "\41\0\1\u01a0\61\0\1\u01a1\75\0\1\u01a2\34\0\1\u01a3"+
    "\72\0\1\u01a4\47\0\1\u01a5\71\0\1\u01a6\46\0\1\u01a7"+
    "\67\0\1\u01a8\51\0\1\u01a9\66\0\1\u01aa\57\0\1\u01ab"+
    "\66\0\1\224\71\0\1\u01ac\55\0\1\u01ad\52\0\1\u01ae"+
    "\47\0\1\u01af\56\0\1\u01b0\73\0\1\u01b1\72\0\1\u01b2"+
    "\33\0\1\u01b3\65\0\1\u01b4\61\0\1\u01b5\57\0\1\u01b6"+
    "\62\0\1\u01b7\72\0\1\u01b8\46\0\1\u01b9\61\0\1\u01ba"+
    "\63\0\1\u01bb\70\0\1\u01bc\35\0\1\u01bd\104\0\1\u01be"+
    "\44\0\1\u01bf\57\0\1\u01c0\67\0\1\u01c1\42\0\1\u01c2"+
    "\62\0\1\u01ba\66\0\1\u01c3\63\0\1\u01c4\47\0\1\u01c5"+
    "\60\0\1\u01c6\66\0\1\u01c7\60\0\1\u01c8\56\0\1\u01c9"+
    "\52\0\1\u01ca\67\0\1\u01cb\66\0\1\u01cc\1\u01cd\4\0"+
    "\1\u01ce\2\0\1\u01cf\41\0\1\u01d0\61\0\1\u01d1\55\0"+
    "\1\u01d2\62\0\1\u01d3\60\0\1\u01d4\64\0\1\u0177\64\0"+
    "\1\u01d5\51\0\1\u01d6\56\0\1\u01d7\65\0\1\u01d8\52\0"+
    "\1\u01d9\76\0\1\u01da\36\0\1\u01db\103\0\1\u01dc\37\0"+
    "\1\u01dd\100\0\1\u01de\37\0\1\u01df\73\0\1\u01e0\62\0"+
    "\1\u01e1\44\0\1\u01e2\1\0\1\u01e3\20\0\1\u01e4\45\0"+
    "\1\u01e5\45\0\1\u01e6\65\0\1\u01e7\62\0\1\u01e8\51\0"+
    "\1\u01e9\73\0\1\u01ea\47\0\1\u01eb\63\0\1\u01ec\101\0"+
    "\1\u01ed\41\0\1\u01ee\61\0\1\u01ef\54\0\1\u01f0\62\0"+
    "\1\u01f1\53\0\1\u01f2\64\0\1\u01f3\55\0\1\u01f4\56\0"+
    "\1\u01f5\61\0\1\u01f6\107\0\1\u01f7\51\0\1\u01f8\37\0"+
    "\1\u01f9\72\0\1\u01fa\50\0\1\u01fb\74\0\1\224\52\0"+
    "\1\u01fc\63\0\1\u01fd\54\0\1\u01fe\72\0\1\u01ff\46\0"+
    "\1\u0200\52\0\1\u0201\67\0\1\u0202\60\0\1\u0203\60\0"+
    "\1\u0204\73\0\1\u0205\53\0\1\u0206\54\0\1\u0207\46\0"+
    "\1\u0208\101\0\1\u0209\37\0\1\u020a\104\0\1\u020b\41\0"+
    "\1\u020c\55\0\1\u020d\66\0\1\u020e\52\0\1\u020f\77\0"+
    "\1\u0210\64\0\1\u0211\54\0\1\u0212\45\0\1\u0213\60\0"+
    "\1\u0214\62\0\1\u0215\73\0\1\u0216\42\0\1\224\57\0"+
    "\1\u0217\66\0\1\u0218\70\0\1\u0219\40\0\1\u021a\60\0"+
    "\1\u021b\73\0\1\u021c\43\0\1\u021d\62\0\1\u021e\66\0"+
    "\1\u021f\56\0\1\u0220\62\0\1\u0221\50\0\1\u0222\106\0"+
    "\1\u0223\42\0\1\u0224\60\0\1\u0225\50\0\1\u0226\60\0"+
    "\1\u0227\73\0\1\u0228\46\0\1\u0229\65\0\1\u022a\65\0"+
    "\1\u022b\46\0\1\u022c\64\0\1\u022d\54\0\1\u022e\66\0"+
    "\1\u022f\61\0\1\u0230\65\0\1\u0231\53\0\1\u0232\74\0"+
    "\1\u0233\43\0\1\u0234\63\0\1\u0235\52\0\1\u0236\77\0"+
    "\1\u0237\47\0\1\u0238\46\0\1\u0239\75\0\1\u023a\46\0"+
    "\1\u023b\57\0\1\u023c\56\0\1\u023d\67\0\1\u023e\56\0"+
    "\1\u023f\76\0\1\u0240\35\0\1\u0241\67\0\1\u0242\64\0"+
    "\1\u0243\47\0\1\u0244\74\0\1\u0245\47\0\1\u0246\53\0"+
    "\1\u0247\70\0\1\u0248\55\0\1\u0249\63\0\1\u01c9\77\0"+
    "\1\u024a\33\0\1\u024b\64\0\1\u024c\57\0\1\u024d\53\0"+
    "\1\u024e\60\0\1\u024f\106\0\1\u0250\32\0\1\u0251\62\0"+
    "\1\u0252\106\0\1\u0253\51\0\1\u0254\37\0\1\u0255\61\0"+
    "\1\u0256\65\0\1\u0257\64\0\1\u0258\101\0\1\u0259\27\0"+
    "\1\u025a\70\0\1\u025b\64\0\1\u025c\47\0\1\u025d\55\0"+
    "\1\u025e\71\0\1\u025f\60\0\1\u0260\60\0\1\u0261\45\0"+
    "\1\u0262\62\0\1\u0263\70\0\1\u0264\55\0\1\u0265\57\0"+
    "\1\u0266\65\0\1\u0267\74\0\1\u0268\44\0\1\u0269\46\0"+
    "\1\u026a\67\0\1\u026b\52\0\1\u026c\70\0\1\u026d\46\0"+
    "\1\u026e\60\0\1\u026f\60\0\1\u0270\104\0\1\u0271\44\0"+
    "\1\u0272\60\0\1\u013c\57\0\1\u0273\60\0\1\u0116\53\0"+
    "\1\u0274\71\0\1\u015c\55\0\1\u0275\63\0\1\u0276\55\0"+
    "\1\u0277\76\0\1\u0278\61\0\1\u0279\36\0\1\u027a\55\0"+
    "\1\u027b\66\0\1\u027c\65\0\1\u027d\45\0\1\u027e\57\0"+
    "\1\u027f\74\0\1\u0280\66\0\1\u0281\64\0\1\u0282\36\0"+
    "\1\u0283\54\0\1\u0284\104\0\1\u0285\43\0\1\u0286\60\0"+
    "\1\u0287\50\0\1\u0288\64\0\1\u0289\60\0\1\u028a\64\0"+
    "\1\u028b\50\0\1\u028c\62\0\1\u028d\122\0\1\u028e\35\0"+
    "\1\u028f\65\0\1\u0290\42\0\1\u0291\50\0\1\u0292\70\0"+
    "\1\u0293\62\0\1\u0294\56\0\1\u0295\112\0\1\u0296\63\0"+
    "\1\u0297\20\0\1\u0298\77\0\1\u0299\47\0\1\u029a\47\0"+
    "\1\u029b\75\0\1\u029c\53\0\1\u029d\54\0\1\u029e\61\0"+
    "\1\u029f\63\0\1\u013c\61\0\1\u02a0\46\0\1\u02a1\71\0"+
    "\1\u02a2\50\0\1\u02a3\60\0\1\u02a4\56\0\1\u02a5\70\0"+
    "\1\u02a6\74\0\1\u02a7\57\0\1\u02a8\40\0\1\u02a9\105\0"+
    "\1\u02aa\35\0\1\u02ab\61\0\1\u02ac\55\0\1\u02ad\65\0"+
    "\1\u02ae\50\0\1\u02af\70\0\1\u02b0\63\0\1\u02b1\60\0"+
    "\1\u02b2\46\0\1\u02b3\61\0\1\u02b4\71\0\1\u02b5\112\0"+
    "\1\u02b6\25\0\1\u02b7\53\0\1\u02b8\55\0\1\u02b9\65\0"+
    "\1\u02ba\61\0\1\u02bb\51\0\1\u02bc\66\0\1\u02bd\52\0"+
    "\1\u02be\72\0\1\u02bf\45\0\1\u02c0\60\0\1\u02c1\70\0"+
    "\1\u02c2\50\0\1\u02c3\60\0\1\u02c4\70\0\1\u02c5\52\0"+
    "\1\u02c6\100\0\1\u02c7\50\0\1\u02c8\46\0\1\u02c9\70\0"+
    "\1\u02ca\63\0\1\u02cb\54\0\1\u02cc\61\0\1\u02cd\60\0"+
    "\1\u02ce\73\0\1\u02cf\43\0\1\u02d0\57\0\1\u02d1\76\0"+
    "\1\u02d2\50\0\1\u02d3\57\0\1\u02d4\112\0\1\u02d5\32\0"+
    "\1\u02d6\72\0\1\u02d7\31\0\1\u02d8\106\0\1\u02d9\31\0"+
    "\1\u02da\75\0\1\u02db\53\0\1\u02dc\51\0\1\u02dd\57\0"+
    "\1\u02de\60\0\1\u02df\67\0\1\u02e0\57\0\1\u02e1\53\0"+
    "\1\u013c\63\0\1\u021f\67\0\1\u02e2\54\0\1\u02e3\76\0"+
    "\1\u02e4\42\0\1\u02e5\60\0\1\u02e6\56\0\1\u02e7\56\0"+
    "\1\u02e8\67\0\1\u02e9\72\0\1\u02ea\43\0\1\u02eb\53\0"+
    "\1\u02ec\56\0\1\u02ed\67\0\1\u02ee\51\0\1\u02ef\66\0"+
    "\1\224\64\0\1\u02f0\55\0\1\u02f1\52\0\1\u02f2\102\0"+
    "\1\u02f3\36\0\1\u02f4\66\0\1\u02f5\61\0\1\u02f6\57\0"+
    "\1\u02f7\66\0\1\u02f8\53\0\1\u02f9\50\0\1\u02fa\62\0"+
    "\1\u02fb\101\0\1\u02fc\41\0\1\u02fd\62\0\1\u02fe\52\0"+
    "\1\u02ff\102\0\1\u0300\46\0\1\u0301\54\0\1\u0302\61\0"+
    "\1\u0303\76\0\1\u0304\44\0\1\u0305\123\0\1\u0306\15\0"+
    "\1\u0307\57\0\1\u0308\52\0\1\u0309\70\0\1\u030a\73\0"+
    "\1\u030b\44\0\1\u030c\74\0\1\u030d\57\0\1\u030e\45\0"+
    "\1\u030f\57\0\1\u0310\57\0\1\u0311\66\0\1\u0312\46\0"+
    "\1\u0313\61\0\1\u0314\66\0\1\u0315\62\0\1\u0316\56\0"+
    "\1\u0317\62\0\1\u0318\55\0\1\u0319\56\0\1\u031a\62\0"+
    "\1\u031b\53\0\1\u031c\60\0\1\u031d\60\0\1\u031e\56\0"+
    "\1\u031f\73\0\1\u0320\52\0\1\u0321\76\0\1\u0322\61\0"+
    "\1\u0323\46\0\1\u0324\46\0\1\u0325\107\0\1\u01c9\35\0"+
    "\1\u0326\64\0\1\u0327\60\0\1\u0328\50\0\1\u0329\70\0"+
    "\1\u032a\54\0\1\u032b\55\0\1\u032c\61\0\1\u032d\56\0"+
    "\1\u032e\103\0\1\224\44\0\1\u032f\57\0\1\u0330\53\0"+
    "\1\u0331\73\0\1\u0332\54\0\1\u0333\110\0\1\u0334\37\0"+
    "\1\u0335\46\0\1\u0336\63\0\1\u0337\76\0\1\u0338\32\0"+
    "\1\u0339\73\0\1\u033a\46\0\1\u033b\102\0\1\u033c\52\0"+
    "\1\u033d\44\0\1\u033e\66\0\1\u033f\51\0\1\u0340\67\0"+
    "\1\u0341\74\0\1\u0342\35\0\1\u0343\65\0\1\u0344\53\0"+
    "\1\u0345\77\0\1\u0346\45\0\1\u0347\73\0\1\u0348\45\0"+
    "\1\u0349\67\0\1\u034a\51\0\1\u034b\100\0\1\u034c\34\0"+
    "\1\u034d\115\0\1\u034e\42\0\1\u034f\64\0\1\u0350\45\0"+
    "\1\u0351\62\0\1\u0352\54\0\1\u0353\75\0\1\u0354\54\0"+
    "\1\u0355\67\0\1\u0356\32\0\1\u0357\65\0\1\u0358\54\0"+
    "\1\u0359\64\0\1\u035a\63\0\1\u035b\60\0\1\u035c\100\0"+
    "\1\224\42\0\1\u035d\51\0\1\u035e\70\0\1\u035f\46\0"+
    "\1\u0360\102\0\1\u0361\45\0\1\u0362\57\0\1\u0363\56\0"+
    "\1\u0364\126\0\1\u0365\6\0\1\u0366\75\0\1\u0367\42\0"+
    "\1\u0368\62\0\1\u0369\71\0\1\u036a\73\0\1\u036b\45\0"+
    "\1\u036c\63\0\1\u036d\52\0\1\u036e\71\0\1\u036f\43\0"+
    "\1\u0370\102\0\1\u0371\37\0\1\u0372\55\0\1\u0373\71\0"+
    "\1\u0374\73\0\1\u0375\37\0\1\u0376\61\0\1\u0377\54\0"+
    "\1\u0378\56\0\1\u0379\73\0\1\u037a\52\0\1\u02ec\60\0"+
    "\1\u037b\62\0\1\u037c\64\0\1\u037d\45\0\1\u037e\72\0"+
    "\1\u037f\47\0\1\u0380\63\0\1\u0381\54\0\1\u0382\61\0"+
    "\1\u0383\71\0\1\u0384\71\0\1\u01ce\42\0\1\u0385\60\0"+
    "\1\u0386\60\0\1\u0387\60\0\1\u0388\110\0\1\u0389\25\0"+
    "\1\u038a\75\0\1\u038b\65\0\1\u038c\36\0\1\u031b\63\0"+
    "\1\u038d\53\0\1\u038e\62\0\1\u038f\73\0\1\u0390\43\0"+
    "\1\u0391\60\0\1\u0392\66\0\1\u0393\71\0\1\u01c9\66\0"+
    "\1\u0394\67\0\1\u0395\31\0\1\u0396\63\0\1\u0397\53\0"+
    "\1\u0398\65\0\1\u0399\50\0\1\u039a\65\0\1\u039b\61\0"+
    "\1\u039c\57\0\1\u039d\53\0\1\u039e\70\0\1\u039f\67\0"+
    "\1\u03a0\53\0\1\u03a1\103\0\1\u03a2\30\0\1\u03a3\107\0"+
    "\1\u021f\61\0\1\u03a4\35\0\1\u03a5\56\0\1\u03a6\55\0"+
    "\1\u03a7\62\0\1\u03a8\51\0\1\u03a9\110\0\1\u015c\35\0"+
    "\1\u03aa\60\0\1\u03ab\55\0\1\u03ac\66\0\1\u03ad\60\0"+
    "\1\u03ae\55\0\1\u03af\55\0\1\u03b0\111\0\1\u03b1\35\0"+
    "\1\u03b2\62\0\1\u03b3\47\0\1\u03b4\67\0\1\u03b5\56\0"+
    "\1\u03b6\71\0\1\u03b7\46\0\1\u03ae\55\0\1\u03b8\71\0"+
    "\1\u01ba\52\0\1\u03b9\60\0\1\u03ba\74\0\1\u03bb\44\0"+
    "\1\u03bc\65\0\1\u03bd\101\0\1\u03be\35\0\1\u03bf\50\0"+
    "\1\u03c0\70\0\1\u03c1\55\0\1\u03c2\74\0\1\u03c3\51\0"+
    "\1\u015c\65\0\1\u03c4\74\0\1\u03c5\46\0\1\u03c6\51\0"+
    "\1\u03b3\4\0\1\u03c7\41\0\1\u03c8\70\0\1\u03c9\71\0"+
    "\1\u03ca\40\0\1\u03cb\66\0\1\u03cc\51\0\1\u03cd\66\0"+
    "\1\u03ce\100\0\1\u03cf\41\0\1\u03d0\53\0\1\u015f\77\0"+
    "\1\u03d1\37\0\1\u03d2\72\0\1\u03d3\56\0\1\u03d4\71\0"+
    "\1\u03d5\52\0\1\u03d6\46\0\1\u03d7\71\0\1\u021f\50\0"+
    "\1\u03d8\66\0\1\u03d9\52\0\1\u03da\71\0\1\u03db\46\0"+
    "\1\u03dc\65\0\1\u03dd\62\0\1\u03de\74\0\1\u03df\40\0"+
    "\1\u03e0\64\0\1\u03e1\60\0\1\u03e2\60\0\1\u03e3\73\0"+
    "\1\u021f\35\0\1\u03e4\77\0\1\u03e5\41\0\1\u03e6\62\0"+
    "\1\u03e7\56\0\1\u03e8\65\0\1\u03e9\54\0\1\u03ea\67\0"+
    "\1\u03eb\51\0\1\u03ec\62\0\1\u03ed\65\0\1\u03ee\60\0"+
    "\1\u03ef\67\0\1\u03f0\62\0\1\u03f1\52\0\1\u03f2\45\0"+
    "\1\u03f3\60\0\1\u03f4\70\0\1\u03f5\50\0\1\u03f6\66\0"+
    "\1\u0315\65\0\1\u03f7\53\0\1\u03f8\52\0\1\u03f9\73\0"+
    "\1\u03fa\111\0\1\u03fb\35\0\1\u03fc\44\0\1\u03fd\65\0"+
    "\1\u03fe\46\0\1\u03ff\63\0\1\u0400\102\0\1\u0401\43\0"+
    "\1\u0402\55\0\1\u0403\77\0\1\u0404\52\0\1\u0405\43\0"+
    "\1\u0406\72\0\1\u0407\55\0\1\u0408\66\0\1\u0409\65\0"+
    "\1\u040a\53\0\1\u040b\50\0\1\u040c\62\0\1\u040d\60\0"+
    "\1\u040e\50\0\1\u040f\65\0\1\u0410\53\0\1\u0411\103\0"+
    "\1\u0412\37\0\1\u0413\75\0\1\224\41\0\1\u0414\60\0"+
    "\1\u0415\73\0\1\u0416\50\0\1\u0417\72\0\1\u0418\60\0"+
    "\1\u0419\44\0\1\u041a\105\0\1\u041b\42\0\1\u041c\55\0"+
    "\1\u041d\55\0\1\u041e\74\0\1\u041f\47\0\1\u0420\63\0"+
    "\1\u0421\50\0\1\u0422\64\0\1\u0202\72\0\1\u0423\47\0"+
    "\1\u0424\76\0\1\u0425\67\0\1\u0426\30\0\1\u0427\60\0"+
    "\1\u0428\105\0\1\u0429\41\0\1\u042a\65\0\1\u042b\51\0"+
    "\1\u042c\52\0\1\u042d\76\0\1\u042e\63\0\1\u042f\41\0"+
    "\1\u0430\60\0\1\u0431\63\0\1\u0432\62\0\1\u0433\53\0"+
    "\1\u0434\64\0\1\u021f\65\0\1\u0435\47\0\1\u0436\63\0"+
    "\1\u0437\63\0\1\u0438\63\0\1\u0439\47\0\1\u043a\121\0"+
    "\1\u021f\22\0\1\u043b\53\0\1\u043c\73\0\1\u043d\66\0"+
    "\1\u043e\40\0\1\u043f\65\0\1\u0440\61\0\1\u0441\67\0"+
    "\1\u0442\52\0\1\u0443\63\0\1\u0444\75\0\1\u0445\53\0"+
    "\1\u01ba\54\0\1\u0446\46\0\1\u0447\60\0\1\u0448\66\0"+
    "\1\u0449\52\0\1\u044a\63\0\1\u044b\56\0\1\u044c\53\0"+
    "\1\u044d\64\0\1\u044e\63\0\1\u044f\63\0\1\u0450\75\0"+
    "\1\u0451\40\0\1\u0452\56\0\1\u0453\57\0\1\u0454\105\0"+
    "\1\u021f\27\0\1\u0455\60\0\1\u0456\72\0\1\u0457\60\0"+
    "\1\u0458\52\0\1\u0459\74\0\1\u045a\54\0\1\u045b\45\0"+
    "\1\u045c\106\0\1\u045d\53\0\1\u045e\52\0\1\u045f\53\0"+
    "\1\u0460\53\0\1\u0461\56\0\1\u0462\71\0\1\224\51\0"+
    "\1\u0463\65\0\1\u0464\55\0\1\u0465\76\0\1\u0466\40\0"+
    "\1\u0467\63\0\1\u0468\61\0\1\u0469\74\0\1\u046a\44\0"+
    "\1\u046b\56\0\1\u046c\63\0\1\u046d\77\0\1\u046e\44\0"+
    "\1\u046f\75\0\1\u0470\40\0\1\u0471\55\0\1\u0472\54\0"+
    "\1\u0473\67\0\1\u0474\50\0\1\u0475\67\0\1\u0476\57\0"+
    "\1\u0477\65\0\1\u0478\55\0\1\u0479\63\0\1\u047a\53\0"+
    "\1\u047b\65\0\1\u047c\70\0\1\u0390\54\0\1\u047d\50\0"+
    "\1\u047e\51\0\1\u047f\73\0\1\u0480\60\0\1\u0481\51\0"+
    "\1\u015c\75\0\1\224\44\0\1\u0482\53\0\1\u0483\77\0"+
    "\1\u0484\46\0\1\u0485\65\0\1\u0486\50\0\1\u0487\101\0"+
    "\1\u0488\42\0\1\u0489\75\0\1\u048a\43\0\1\u048b\66\0"+
    "\1\u048c\51\0\1\u048d\64\0\1\u048e\73\0\1\u048f\35\0"+
    "\1\u0490\64\0\1\u0491\64\0\1\u0492\54\0\1\u0493\54\0"+
    "\1\u0494\77\0\1\u0495\51\0\1\u0496\52\0\1\u0497\56\0"+
    "\1\u0498\64\0\1\u03ae\54\0\1\u0499\61\0\1\u049a\64\0"+
    "\1\u049b\72\0\1\u049c\64\0\1\u049d\56\0\1\u049e\2\0"+
    "\1\u049f\44\0\1\u04a0\53\0\1\u04a1\100\0\1\u04a2\37\0"+
    "\1\u04a3\65\0\1\u04a4\61\0\1\224\51\0\1\u04a5\61\0"+
    "\1\u04a6\70\0\1\u04a7\51\0\1\u04a8\65\0\1\u04a9\57\0"+
    "\1\u04aa\51\0\1\u04ab\72\0\1\u04ac\11\0\1\u049f\47\0"+
    "\1\u04ad\45\0\1\u04ae\72\0\1\u04af\54\0\1\u0208\65\0"+
    "\1\u04b0\57\0\1\u04b1\71\0\1\u015c\45\0\1\u04b2\57\0"+
    "\1\u04b3\64\0\1\u04b4\60\0\1\u04b5\45\0\1\u04b6\61\0"+
    "\1\u04b7\72\0\1\u04b8\45\0\1\u04b9\65\0\1\u04ba\56\0"+
    "\1\u04bb\112\0\1\u0264\33\0\1\u04bc\71\0\1\u04bd\60\0"+
    "\1\u04be\40\0\1\u04bf\64\0\1\u04c0\101\0\1\u04c1\37\0"+
    "\1\u04c2\53\0\1\u04c3\62\0\1\u04c4\71\0\1\u04c5\47\0"+
    "\1\u04c6\60\0\1\u047b\56\0\1\u04c7\101\0\1\u04c8\47\0"+
    "\1\u04c9\104\0\1\u01ba\36\0\1\u04ca\55\0\1\u04cb\65\0"+
    "\1\u04cc\51\0\1\u04cd\63\0\1\u04ce\63\0\1\u04cf\60\0"+
    "\1\u04d0\46\0\1\u04d1\60\0\1\u04d2\64\0\1\u04d3\74\0"+
    "\1\u04d4\41\0\1\u04d5\100\0\1\u04d6\46\0\1\u04d7\57\0"+
    "\1\u04d8\74\0\1\u04d9\36\0\1\u04da\66\0\1\u04db\60\0"+
    "\1\u04dc\100\0\1\u04dd\41\0\1\u04de\52\0\1\u04df\71\0"+
    "\1\u04e0\60\0\1\u04e1\63\0\1\u04e2\51\0\1\u04e3\57\0"+
    "\1\u04e4\54\0\1\u04e5\70\0\1\u04e6\51\0\1\u04e7\103\0"+
    "\1\u04e8\34\0\1\u04e9\70\0\1\u04ea\67\0\1\u04eb\52\0"+
    "\1\u04ec\47\0\1\u038b\60\0\1\u04ed\104\0\1\u04ee\47\0"+
    "\1\u04ef\103\0\1\u04f0\22\0\1\u04e6\66\0\1\u04f1\53\0"+
    "\1\u04f2\55\0\1\u04f3\65\0\1\u04f4\63\0\1\u04f5\50\0"+
    "\1\u04f6\73\0\1\u04f7\70\0\1\u04f8\37\0\1\u04f9\66\0"+
    "\1\u04fa\50\0\1\u04fb\65\0\1\u04fc\72\0\1\u04fd\51\0"+
    "\1\u04fe\63\0\1\u04ff\45\0\1\u0500\103\0\1\u0501\60\0"+
    "\1\u0502\44\0\1\u0503\53\0\1\u0504\75\0\1\u0505\51\0"+
    "\1\u0506\60\0\1\u0507\62\0\1\u0508\61\0\1\u0509\55\0"+
    "\1\u050a\56\0\1\u050b\52\0\1\u050c\72\0\1\u050d\55\0"+
    "\1\u050e\51\0\1\u050f\73\0\1\u0510\60\0\1\u0511\52\0"+
    "\1\u0512\54\0\1\u0513\66\0\1\u0514\117\0\1\u0515\22\0"+
    "\1\u0516\76\0\1\u0508\41\0\1\u0517\66\0\1\u0458\43\0"+
    "\1\u0518\72\0\1\u0519\71\0\1\u051a\56\0\1\u051b\47\0"+
    "\1\u051c\56\0\1\u051d\75\0\1\u051e\45\0\1\u051f\71\0"+
    "\1\u0520\40\0\1\u0521\57\0\1\u0522\70\0\1\u0523\53\0"+
    "\1\u0524\63\0\1\u0525\54\0\1\u0526\56\0\1\u0527\65\0"+
    "\1\u021f\70\0\1\u0528\50\0\1\u0529\61\0\1\u052a\77\0"+
    "\1\u052b\35\0\1\u052c\66\0\1\u052d\62\0\1\u052e\53\0"+
    "\1\u052f\54\0\1\u0530\60\0\1\u0531\64\0\1\u0532\101\0"+
    "\1\u037d\32\0\1\u0533\70\0\1\u0534\77\0\1\u0535\52\0"+
    "\1\u0536\37\0\1\u0537\76\0\1\u0538\60\0\1\u0539\52\0"+
    "\1\u053a\60\0\1\u053b\66\0\1\u053c\44\0\1\u053d\60\0"+
    "\1\u053e\63\0\1\u053f\110\0\1\u0540\25\0\1\u0541\62\0"+
    "\1\u0542\64\0\1\u0543\51\0\1\u0544\100\0\1\u0545\52\0"+
    "\1\u0546\70\0\1\u0547\50\0\1\u0548\54\0\1\u0549\74\0"+
    "\1\u054a\37\0\1\u054b\75\0\1\u054c\64\0\1\u054d\42\0"+
    "\1\u054e\113\0\1\u054f\26\0\1\u0550\77\0\1\u0551\46\0"+
    "\1\u0552\45\0\1\u0553\72\0\1\u0554\73\0\1\u0555\46\0"+
    "\1\u0556\47\0\1\u0557\71\0\1\u0558\47\0\1\u0559\71\0"+
    "\1\u055a\55\0\1\u055b\62\0\1\u055c\54\0\1\u03ae\54\0"+
    "\1\u055d\70\0\1\u055e\50\0\1\u055f\60\0\1\u0560\71\0"+
    "\1\u0561\63\0\1\u0562\102\0\1\u0563\60\0\1\u0564\21\0"+
    "\1\u0565\62\0\1\u0566\100\0\1\u0567\47\0\1\u0568\51\0"+
    "\1\u0569\55\0\1\u056a\66\0\1\u056b\55\0\1\u056c\65\0"+
    "\1\u056d\67\0\1\u056e\64\0\1\u056f\40\0\1\u0570\57\0"+
    "\1\u0571\65\0\1\u0572\55\0\1\u0573\57\0\1\u0574\100\0"+
    "\1\u0575\40\0\1\u0576\61\0\1\u0577\75\0\1\u0578\52\0"+
    "\1\u021f\57\0\1\u0579\46\0\1\u057a\73\0\1\u057b\50\0"+
    "\1\u057c\64\0\1\u057d\53\0\1\u057e\62\0\1\u057f\77\0"+
    "\1\u0580\70\0\1\u021f\32\0\1\u0581\66\0\1\u0582\45\0"+
    "\1\u0583\64\0\1\u0584\60\0\1\u0585\62\0\1\u0586\54\0"+
    "\1\u0587\60\0\1\u0588\74\0\1\u0589\42\0\1\u058a\62\0"+
    "\1\u058b\112\0\1\u058c\27\0\1\u058d\100\0\1\u058e\41\0"+
    "\1\u058f\54\0\1\u0590\65\0\1\u0591\76\0\1\u0592\50\0"+
    "\1\u0593\45\0\1\u0594\75\0\1\u0595\71\0\1\u0596\37\0"+
    "\1\u0597\63\0\1\u0598\53\0\1\u0599\111\0\1\u059a\43\0"+
    "\1\u059b\51\0\1\u059c\71\0\1\u021f\54\0\1\u059d\62\0"+
    "\1\u0403\47\0\1\u059e\54\0\1\u059f\64\0\1\u05a0\53\0"+
    "\1\u05a1\61\0\1\u01d2\73\0\1\u05a2\64\0\1\u05a3\37\0"+
    "\1\u05a4\65\0\1\u05a5\53\0\1\u05a6\73\0\1\u05a7\73\0"+
    "\1\u05a8\42\0\1\u05a9\50\0\1\u05aa\62\0\1\u05ab\104\0"+
    "\1\u05ac\37\0\1\u05ad\63\0\1\u05ae\60\0\1\u05af\52\0"+
    "\1\u05b0\62\0\1\u05b1\62\0\1\u05b2\60\0\1\u05b3\74\0"+
    "\1\u05b4\43\0\1\u05b5\62\0\1\u0338\61\0\1\u05b6\60\0"+
    "\1\u0508\63\0\1\u05b7\52\0\1\u05b8\62\0\1\u01d2\72\0"+
    "\1\u05b9\47\0\1\u05ba\52\0\1\u05bb\65\0\1\u05bc\53\0"+
    "\1\u05bd\57\0\1\u021f\61\0\1\u05be\70\0\1\u05bf\50\0"+
    "\1\u05c0\56\0\1\u05c1\126\0\1\u05c2\13\0\1\u05c3\71\0"+
    "\1\u01ba\61\0\1\u05c4\61\0\1\u05c5\104\0\1\u05c6\43\0"+
    "\1\u05c7\35\0\1\u05c8\74\0\1\u05c9\53\0\1\u05ca\51\0"+
    "\1\u05cb\67\0\1\u05cc\73\0\1\u0416\46\0\1\u05cd\60\0"+
    "\1\u05ce\53\0\1\u037d\65\0\1\u05cf\50\0\1\u05d0\66\0"+
    "\1\u05d1\53\0\1\u05d2\76\0\1\u05d3\41\0\1\u05d4\67\0"+
    "\1\u05d5\61\0\1\u05d6\53\0\1\u05d7\55\0\1\u05d8\61\0"+
    "\1\u05d9\64\0\1\u05da\63\0\1\u05db\105\0\1\u05dc\42\0"+
    "\1\u05dd\56\0\1\u05de\66\0\1\u05df\52\0\1\u05e0\71\0"+
    "\1\u05e1\47\0\1\u05e2\113\0\1\u05e3\16\0\1\u05e4\61\0"+
    "\1\u05e5\61\0\1\u05e6\64\0\1\u037d\51\0\1\u05e7\54\0"+
    "\1\u05e8\64\0\1\u05e9\53\0\1\u05ea\62\0\1\u03a1\63\0"+
    "\1\u05eb\61\0\1\u05ec\52\0\1\u05ed\76\0\1\u05ee\42\0"+
    "\1\u05ef\66\0\1\u05f0\57\0\1\u05f1\63\0\1\u05f2\74\0"+
    "\1\u05f3\63\0\1\u05f4\54\0\1\u05f5\43\0\1\u05f6\57\0"+
    "\1\u05f7\63\0\1\u05f8\53\0\1\u05f9\65\0\1\u05fa\51\0"+
    "\1\u04a2\60\0\1\u05fb\72\0\1\u05fc\62\0\1\u05fd\52\0"+
    "\1\u05fe\61\0\1\u05ff\63\0\1\u0600\47\0\1\u0601\56\0"+
    "\1\u0602\76\0\1\u0603\42\0\1\u0604\70\0\1\u0605\63\0"+
    "\1\u0606\61\0\1\u0607\61\0\1\u0608\61\0\1\u0609\46\0"+
    "\1\u060a\73\0\1\u060b\60\0\1\u060c\43\0\1\u060d\101\0"+
    "\1\u060e\45\0\1\u060f\71\0\1\u0610\52\0\1\u0611\47\0"+
    "\1\u0612\66\0\1\u0613\73\0\1\u0614\36\0\1\u0615\73\0"+
    "\1\u0508\51\0\1\u0616\76\0\1\u0617\36\0\1\u0618\63\0"+
    "\1\u046a\54\0\1\u0619\60\0\1\u061a\62\0\1\u021f\74\0"+
    "\1\u061b\46\0\1\u061c\66\0\1\u061d\61\0\1\u02ec\45\0"+
    "\1\u061e\66\0\1\u061f\52\0\1\u0620\60\0\1\u0621\114\0"+
    "\1\u0622\47\0\1\u0623\52\0\1\u0624\45\0\1\u0625\101\0"+
    "\1\u0626\41\0\1\u0627\71\0\1\u0628\52\0\1\u0629\76\0"+
    "\1\u062a\35\0\1\u062b\56\0\1\u062c\116\0\1\u062d\31\0"+
    "\1\u062e\54\0\1\u062f\55\0\1\u0630\65\0\1\u0631\60\0"+
    "\1\u0632\57\0\1\u0633\67\0\1\u0634\55\0\1\u0635\77\0"+
    "\1\u0636\46\0\1\u0637\43\0\1\u0638\64\0\1\u0639\56\0"+
    "\1\u063a\101\0\1\u063b\35\0\1\u063c\67\0\1\u063d\63\0"+
    "\1\u063e\63\0\1\u063f\51\0\1\u0640\53\0\1\u0641\64\0"+
    "\1\u0642\66\0\1\u0643\55\0\1\u0644\110\0\1\u0645\43\0"+
    "\1\u0646\47\0\1\u0647\76\0\1\u0648\30\0\1\u0649\65\0"+
    "\1\u064a\66\0\1\u064b\70\0\1\u064c\44\0\1\u0373\66\0"+
    "\1\u064d\46\0\1\u064e\57\0\1\u064f\63\0\1\u0650\66\0"+
    "\1\u0651\46\0\1\u0652\64\0\1\u0653\61\0\1\u0654\53\0"+
    "\1\u0655\57\0\1\u0656\62\0\1\u0657\66\0\1\u0658\50\0"+
    "\1\u0659\70\0\1\u065a\66\0\1\u065b\42\0\1\u065c\67\0"+
    "\1\u03a1\53\0\1\u065d\57\0\1\u065e\65\0\1\u065f\53\0"+
    "\1\u0660\75\0\1\u0661\65\0\1\u0662\42\0\1\u0663\100\0"+
    "\1\u0664\50\0\1\u0665\61\0\1\u0666\55\0\1\u0667\54\0"+
    "\1\u03ae\65\0\1\u0668\53\0\1\u0669\51\0\1\u066a\67\0"+
    "\1\u066b\60\0\1\u066c\56\0\1\u066d\54\0\1\u066e\65\0"+
    "\1\u066f\62\0\1\u0670\105\0\1\u0671\26\0\1\u0672\55\0"+
    "\1\u0673\60\0\1\u0674\73\0\1\u05bd\47\0\1\u0675\56\0"+
    "\1\u0676\73\0\1\u0677\52\0\1\u0678\70\0\1\u0679\64\0"+
    "\1\u067a\56\0\1\u067b\53\0\1\u067c\54\0\1\u067d\62\0"+
    "\1\u067e\57\0\1\u067f\56\0\1\u0680\65\0\1\u05a9\50\0"+
    "\1\u0681\104\0\1\u0682\54\0\1\u02ec\36\0\1\u0683\72\0"+
    "\1\u0684\63\0\1\u0685\56\0\1\u0686\51\0\1\u0687\66\0"+
    "\1\u0688\102\0\1\u0176\34\0\1\u0689\52\0\1\u068a\75\0"+
    "\1\u068b\54\0\1\u068c\53\0\1\u068d\64\0\1\u068e\50\0"+
    "\1\u068f\127\0\1\u021f\11\0\1\u0690\56\0\1\u0691\66\0"+
    "\1\u0692\75\0\1\u0693\35\0\1\u0694\72\0\1\u0695\71\0"+
    "\1\u0696\50\0\1\u0697\54\0\1\u0698\54\0\1\u0699\74\0"+
    "\1\u069a\64\0\1\u069b\36\0\1\u069c\57\0\1\u069d\76\0"+
    "\1\u01ba\51\0\1\u069e\100\0\1\u069f\31\0\1\u06a0\70\0"+
    "\1\u06a1\55\0\1\u06a2\100\0\1\u06a3\37\0\1\u06a4\63\0"+
    "\1\u06a5\57\0\1\u05a9\45\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[83300];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\2\1\u021a\0\1\11\u0486\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[1701];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */

  EntityCatalog catalog;

  public final void setCatalog(EntityCatalog c)
  {
    catalog = c;
  }

  public final int yychar()
  {
    return yychar;
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public GolfExtractorImpl(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 254) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public EntityAnnotation getNextToken() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { /*do nothing*/
            }
          case 3: break;
          case 2: 
            { EntityAnnotation annotation = new EntityAnnotation();
  	annotation.setContent(yytext());
  	annotation.setPosition(yychar);
  	annotation.setSource("JFLEX");
  	annotation.addType(catalog.getEntityType("tennistournament"));
  	return annotation;
            }
          case 4: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
