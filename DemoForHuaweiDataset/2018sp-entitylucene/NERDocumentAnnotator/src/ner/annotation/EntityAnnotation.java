package ner.annotation;

import java.util.ArrayList;
import java.util.Comparator;

/**
 * An object representing token information. It contains an entity tag
 * as well as all sub-tokens (tokens which are within this token's text).
 * EntityAnnotation are meant to be generated by NER techniques, then reconciled with
 * their subTokenAnnotation to create a flat partition of an input.
 * @author aaulabaugh@gmail.com
 */

public class EntityAnnotation implements Comparator<EntityAnnotation>, Comparable<EntityAnnotation>, java.io.Serializable
{
	/**
	 * default serial version UID
	 */
	private static final long serialVersionUID = 1L;

	//All tokens within this token's text
	private transient ArrayList<EntityAnnotation> subTokenAnnotation;
	
	//The text value of the token
	private String content;
	
	//The location of the token
	private int beginOffset;
	
	//The NER technique which generated this token
	private String source;
	
	//The entity categories of this token
	private ArrayList<EntityType> entityTypes;
	
	//This term is the termNum-th in the input text
	private int termNum;
	
	//The number of times this token has been loaded into the index
	private transient int indexedCount;
	
	public EntityAnnotation()
	{
		subTokenAnnotation = new ArrayList<EntityAnnotation>();
		content = null;
		beginOffset = -1;
		source = null;
		entityTypes = new ArrayList<EntityType>();
		termNum = -1;
		indexedCount = 0;
	}
	
	public EntityAnnotation clone()
	{
		EntityAnnotation myClone = new EntityAnnotation();
		myClone.content = this.content;
		myClone.beginOffset = this.beginOffset;
		myClone.source = this.source;
		myClone.termNum = this.termNum;
		myClone.indexedCount = this.indexedCount;
		
		myClone.entityTypes = new ArrayList<EntityType>();
		for(EntityType type : this.entityTypes)
		{
			myClone.entityTypes.add(type.clone());
		}
		
		myClone.subTokenAnnotation = new ArrayList<EntityAnnotation>();
		for(EntityAnnotation annotation : this.subTokenAnnotation)
		{
			myClone.subTokenAnnotation.add(annotation.clone());
		}
		
		return myClone;
	}
	
	/**
	 * Adds an EntityAnnotation to subTokenAnnotation in the correct place so
	 * "larger tokens on top" is preserved.
	 * @param newAnnotation
	 */
	public void addAnnotation(EntityAnnotation newAnnotation)
	{
		boolean added = false;
		if(isEqualToken(newAnnotation))
		{
			subTokenAnnotation.add(newAnnotation);
			added = true;
		}
		else
		{
			for(EntityAnnotation subAnnotation : subTokenAnnotation)
			{
				if(subAnnotation.isSuperToken(newAnnotation) && !added)
				{
					subAnnotation.addAnnotation(newAnnotation);
					added = true;
				}
			}
			if(!added)
			{
				subTokenAnnotation.add(newAnnotation);
				added = true;
			}
		}
	}
	
	public int getIndexedCount()
	{
		return indexedCount;
	}
	
	/**
	 * @return the appropriate entity type for this iteration of indexing
	 */
	public String getThisIterationType()
	{			
		if(indexedCount < entityTypes.size())
		{
			String type = entityTypes.get(indexedCount).getID();
			indexedCount++;
			return type;
		}
		indexedCount++;
		return "O";
	}
	
	/**
	 * @return true iff this annotation has been indexed the appropriate number
	 * of times
	 */
	public boolean isFullyIndexed()
	{
		return indexedCount > entityTypes.size();
	}
	
	/**
	 * Removes all entity types
	 */
	public void clearTypes()
	{
		entityTypes = new ArrayList<EntityType>();
	}
	
	/**
	 * Resets all subAnnotations
	 */
	public void clearSubAnnotation()
	{
		subTokenAnnotation = new ArrayList<EntityAnnotation>();
	}
	
	public void setContent(String str)
	{
		content = str;
	}
	
	public void setPosition(int offset)
	{
		beginOffset = offset;
	}
	
	public void setSource(String src)
	{
		source = src;
	}
	
	public void addType(EntityType type)
	{
		entityTypes.add(type);
	}
	
	public void setTypes(ArrayList<EntityType> types)
	{
		entityTypes = types;
	}
	
	public void setTermNum(int num)
	{
		termNum = num;
	}
	
	public ArrayList<EntityAnnotation> getChildren()
	{
		return subTokenAnnotation;
	}
	
	public String getContent()
	{
		return content;
	}
	
	public int getPosition()
	{
		return beginOffset;
	}
	
	public String getSource()
	{
		return source;
	}
	
	public ArrayList<EntityType> getTypes()
	{
		return entityTypes;
	}
	
	public int getTermNum()
	{
		return termNum;
	}
	
	/**
	 * True if this EntityAnnotation encapsulates or is equal to the other
	 * @param other
	 * @return
	 */
	public boolean isSuperToken(EntityAnnotation other)
	{
		int otherStart = other.getPosition();
		int otherEnd = otherStart + other.getContent().length();
		return otherStart >= beginOffset && otherEnd <= (beginOffset + content.length());
	}
	
	public String toString()
	{
		String typesString = "";
		for(EntityType t : entityTypes)
		{
			typesString = typesString + t.getID() + "-";
		}
		if(typesString.length() > 0)
			typesString = typesString.substring(0, typesString.length()-1);
		return "<" + String.join(", ", content, Integer.toString(beginOffset), source, typesString) + ">";
	}
	
	/**
	 * True iff this EntityAnnotation's content and position exactly match the other's.
	 * @param other
	 * @return
	 */
	public boolean isEqualToken(EntityAnnotation other)
	{
		return (other.getContent().equals(content) && other.getPosition()== beginOffset);
	}

	@Override
	public int compareTo(EntityAnnotation o)
	{
		return beginOffset - o.beginOffset;
	}

	@Override
	public int compare(EntityAnnotation o1, EntityAnnotation o2)
	{
		return o1.beginOffset - o2.beginOffset;
	}

}
